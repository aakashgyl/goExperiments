// Code generated by protoc-gen-go. DO NOT EDIT.
// source: src/main/proto/ndac.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	src/main/proto/ndac.proto

It has these top-level messages:
	CmData
	CmReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type CmData struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *CmData) Reset()                    { *m = CmData{} }
func (m *CmData) String() string            { return proto1.CompactTextString(m) }
func (*CmData) ProtoMessage()               {}
func (*CmData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CmData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// The response message containing the greetings
type CmReply struct {
	Status  string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *CmReply) Reset()                    { *m = CmReply{} }
func (m *CmReply) String() string            { return proto1.CompactTextString(m) }
func (*CmReply) ProtoMessage()               {}
func (*CmReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CmReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CmReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto1.RegisterType((*CmData)(nil), "proto.CmData")
	proto1.RegisterType((*CmReply)(nil), "proto.CmReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EdgeServices service

type EdgeServicesClient interface {
	// Sends a greeting
	SendCMData(ctx context.Context, opts ...grpc.CallOption) (EdgeServices_SendCMDataClient, error)
}

type edgeServicesClient struct {
	cc *grpc.ClientConn
}

func NewEdgeServicesClient(cc *grpc.ClientConn) EdgeServicesClient {
	return &edgeServicesClient{cc}
}

func (c *edgeServicesClient) SendCMData(ctx context.Context, opts ...grpc.CallOption) (EdgeServices_SendCMDataClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_EdgeServices_serviceDesc.Streams[0], c.cc, "/proto.EdgeServices/SendCMData", opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeServicesSendCMDataClient{stream}
	return x, nil
}

type EdgeServices_SendCMDataClient interface {
	Send(*CmData) error
	CloseAndRecv() (*CmReply, error)
	grpc.ClientStream
}

type edgeServicesSendCMDataClient struct {
	grpc.ClientStream
}

func (x *edgeServicesSendCMDataClient) Send(m *CmData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *edgeServicesSendCMDataClient) CloseAndRecv() (*CmReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CmReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for EdgeServices service

type EdgeServicesServer interface {
	// Sends a greeting
	SendCMData(EdgeServices_SendCMDataServer) error
}

func RegisterEdgeServicesServer(s *grpc.Server, srv EdgeServicesServer) {
	s.RegisterService(&_EdgeServices_serviceDesc, srv)
}

func _EdgeServices_SendCMData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EdgeServicesServer).SendCMData(&edgeServicesSendCMDataServer{stream})
}

type EdgeServices_SendCMDataServer interface {
	SendAndClose(*CmReply) error
	Recv() (*CmData, error)
	grpc.ServerStream
}

type edgeServicesSendCMDataServer struct {
	grpc.ServerStream
}

func (x *edgeServicesSendCMDataServer) SendAndClose(m *CmReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *edgeServicesSendCMDataServer) Recv() (*CmData, error) {
	m := new(CmData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EdgeServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EdgeServices",
	HandlerType: (*EdgeServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendCMData",
			Handler:       _EdgeServices_SendCMData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "src/main/proto/ndac.proto",
}

func init() { proto1.RegisterFile("src/main/proto/ndac.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0x8d, 0x68, 0x97, 0x1d, 0x56, 0xc1, 0x1c, 0xa4, 0x7e, 0x1c, 0x96, 0x9e, 0x7a, 0x4a,
	0x60, 0x3d, 0x7a, 0x10, 0xb6, 0x7a, 0x14, 0x4a, 0xfa, 0x0b, 0xc6, 0x64, 0xa8, 0x85, 0xa4, 0x09,
	0x49, 0xfc, 0xfa, 0xf7, 0x62, 0xaa, 0xb2, 0xa7, 0x79, 0x9f, 0xc3, 0xfb, 0x3e, 0x03, 0x57, 0x29,
	0x6a, 0xe9, 0x70, 0x9a, 0x65, 0x88, 0x3e, 0x7b, 0x39, 0x1b, 0xd4, 0xa2, 0x44, 0x7e, 0x5a, 0x4e,
	0x73, 0x0b, 0x55, 0xe7, 0x1e, 0x31, 0x23, 0xe7, 0x70, 0x62, 0x30, 0x63, 0xcd, 0xb6, 0xac, 0xdd,
	0xa8, 0x92, 0x9b, 0x7b, 0x58, 0x75, 0x4e, 0x51, 0xb0, 0x5f, 0xfc, 0x12, 0xaa, 0x94, 0x31, 0xbf,
	0xa5, 0xfa, 0x78, 0xcb, 0xda, 0xb5, 0xfa, 0x25, 0x5e, 0xc3, 0xca, 0x51, 0x4a, 0x38, 0x52, 0x69,
	0xae, 0xd5, 0x1f, 0xee, 0x1e, 0x60, 0xf3, 0x64, 0x46, 0x1a, 0x28, 0xbe, 0x4f, 0x9a, 0x12, 0x97,
	0x00, 0x03, 0xcd, 0xa6, 0x7b, 0x2e, 0xba, 0xb3, 0xe5, 0x0f, 0xb1, 0xd8, 0xaf, 0xcf, 0xff, 0xb1,
	0xe8, 0x9a, 0xa3, 0x96, 0xed, 0x77, 0x70, 0x33, 0x79, 0x31, 0xc6, 0xa0, 0x05, 0x7d, 0xa2, 0x0b,
	0x96, 0x92, 0x78, 0x25, 0x6b, 0xfd, 0x87, 0x8f, 0xd6, 0xec, 0x2f, 0x0e, 0xd7, 0xfb, 0x9f, 0x76,
	0xcf, 0x5e, 0xaa, 0x32, 0x73, 0xf7, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x28, 0x62, 0xd7, 0x61, 0xfa,
	0x00, 0x00, 0x00,
}
